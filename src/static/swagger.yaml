openapi: 3.0.3
info:
  title: TPBack
  description: API
  version: 1.0.0
servers:
  -   url: http://localhost:3000
      description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiError:
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
    ApiSuccess:
      type: object
      properties:
        success:
          type: boolean
          default: true
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
    Dpe:
      type: object
      properties:
        _id:
          type: string
        "N°_département_(BAN)":
          type: number
        "Date_réception_DPE":
          type: string
        "Date_établissement_DPE":
          type: string
        "Date_visite_diagnostiqueur":
          type: string
        "Etiquette_GES":
          type: string
        "Etiquette_DPE":
          type: string
        "Année_construction":
          type: number
        "Surface_habitable_logement":
          type: number
        "Adresse_(BAN)":
          type: string
        "Code_postal_(BAN)":
          type: number
    Query:
      type: object
      properties:
        _id:
          type: string
        user:
          $ref: "#/components/schemas/User"
        results:
          type: array
          items:
            type: object
            properties:
              dep:
                $ref: "#/components/schemas/Dpe"
              lat:
                type: number
              lon:
                type: number
        params:
          type: object
    UserToken:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        tokens:
          type: object
          properties:
            accessToken:
              type: string
            refreshToken:
              type: string
            expiresIn:
              type: number
            refreshExpiresIn:
              type: number
security:
  - bearerAuth: []

paths:
  /api/v1/auth/login:
    post:
      security: []
      tags:
        - auth
      summary: login
      operationId: authLogin
      description: Récupérer un token à partir de l'email et mot de passe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiSuccess"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/UserToken"
  /api/v1/auth/register:
    post:
      security: []
      tags:
        - auth
      summary: register
      operationId: authRegister
      description: Sauvegarder un nouvel utilisateur dans la base de données
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiSuccess"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/UserToken"
  /api/v1/auth/me:
    get:
      tags:
        - auth
      summary: get me
      operationId: authGetMe
      description: Savoir qui est connecté avec le token
      responses:
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiSuccess"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
  /api/v1/auth/refresh:
    post:
      security: [ ]
      tags:
        - auth
      summary: refresh
      operationId: authRefresh
      description: Récupérer un token à partir d'un refresh token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiSuccess"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/UserToken"
  /api/v1/logement/search:
    get:
      tags:
        - logement
      summary: search
      operationId: logementSearch
      description: Trouver les coordonnées de logements selon des critères de recherche
      responses:
        '404':
          description: Aucune coordonées trouvées pour les critères saisies
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiSuccess"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          cached:
                            type: boolean
                          query:
                            $ref: "#/components/schemas/Query"
  /api/v1/queries:
    get:
      tags:
        - query
      summary: list queries
      operationId: queriesList
      description: Lister les recherches de l'utilisateur connecté
      parameters:
        - in: path
          name: offset
          description: Page de résultats à afficher
          schema:
              type: integer
              default: 0
          required: false
      responses:
        '401':
          description: Utilisateur non connecté
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiSuccess"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          query:
                            type: array
                            items:
                              $ref: "#/components/schemas/Query"
                          limit:
                            type: number
                          offset:
                            type: number
                          length:
                            type: number
  /api/v1/logement/{queryId}:
    delete:
      tags:
        - query
      summary: delete query
      operationId: queriesDelete
      description: Supprimer une recherche
      parameters:
        - in: path
          name: queryId
          description: ID de la recherche à supprimer
          required: true
      responses:
        '401':
          description: Utilisateur non connecté
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        '404':
          description: Recherche non trouvée pour l'ID fourni
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiSuccess"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          query:
                            $ref: "#/components/schemas/Query"
